=====================
iterative_blast_phylo
=====================

#. For each mate supplied
    #. Symlink input reads and/or convert fastq->fasta
    #. Count input lines
    #. For each blast_db_list
        #. If diamond or blastx then run orf_filter to filter
           input reads prior to blast
        #. Blast in chunks defined by ninst_list
        #. Generate x.mate.blast.phylo for blast report
        #. Pull out top blast results only
        #. Then annotate top blast result
        #. Get all reads that didn't blast
        #. Count reads that didn't blast and add to .count file with name of 
           blast_task_list
        #. Get superclass counts file
        #. Symlink x.contig.noblast.fasta as input to next blast_db_list
#. Create reports for all blast_task_list items

Configuration Options
=====================

command iterative_blast_phylo

* blast_db_list
    Database[s] that are used to blast/diamond against

    The following two values are available for replacement from 
    :ref:`config-yaml-base`

        * ``BLAST_NT`` will be replaced using nt_db
        * ``DIAMOND_NR`` will be replaced using nr_db

    Choices: ``BLAST_NT``, ``DIAMOND_NR``

    Example: ``BLAST_NT,BLAST_NT,DIAMOND_NR``
* blast_task_list
    Defines the blast tasks that will be run. Must match blast_db_list in size

    Choices: ``megablast``, ``dc-megablast``, ``blastn``, ``blastx``, ``diamond``

    Example: ``megablast,dc-megablast``
* blast_options_list
    Blast options except for: ``-task -query -db -out -outfmt -num_descriptions``
    
    Example: ``-evalue 1e-4 -word_size 28,-evalue 1e-4 -word_size 12,-evalue 1e-4``
* ninst_list
    The input file will be broken into chunks and blasted in parallel - this 
    parameter is the number of instances of BLAST you want to run in parallel
    If ``NUMINST`` is specified then ``NODE_NUM`` from 
    :ref:`config-yaml-base` will be used to replace it during install
    
    Must be the same size as blast_task_list

    Example: ``NUMINST,NUMINST``
* taxonomy_names
    NCBI taxonomy names dump file

    If ``TAX_NAMES`` is specified then ``tax_names`` from 
    :ref:`config-yaml-base` will be used to replace it during install

    Example: ``TAX_NAMES``
* taxonomy_nodes
    NCBI taxonomy nodes dump file

    If ``TAX_NODES`` is specified then ``tax_nodes`` from 
    :ref:`config-yaml-base` will be used to replace it during install

    Example: ``TAX_NODES``
* blast_pro_db
    NCBI protein database for taxonomy information lookup with blastdbcmd

    If ``BLASTNR`` is specified then ``nr_db`` from :ref:`config-yaml-base` will 
    be used to replace it during install

    Example: ``BLASTNR``

.. _iterative-blast-phylo-output-interpretation:

Output Interpretation
=====================

The iterative_blast_phylo_1 and iterative_blast_phylo_2 stages are the most complex
stages and produce the most important files of the pipeline. 

* iterative_blast_phylo_1 produces the phylogony information for contigs
* iterative_blast_phylo_2 produces the phylogony information for the unassembled
  reads

The only difference between \_1 and \_2 is essentially the prefix of the files 
produced. in \_1 the files are prefixed with contig, where \_2 the files are prefixed
with R1 and R2.

The pipeline loops over each input file and then loops through each of the listed
``blast_task_list`` items. This means for every ``blast_task_list`` you will see
5 files and 1 directory:

X being the iteration number and Y being the input file prefix(contig, R1, R2)

* X.Y.blast
* X.Y.blast.ann
* X.Y.blast.phylo
* X.Y.blast.t2q
* X.Y.fasta
* X.Y.noblast.fasta
* tmp_Y_X

tmp_Y_X
-------

The blasting of each input read is split amongst the ``ninst`` parameter set in your
param.txt. That is, each inputfile is split up ``ninst`` times and then each of the
resulting split fasta files is blasted in separate processes in an attempt to
parallelize the process and make it faster. This is where the 
``tmp_Y_X/tmpsplitXXXX`` files come from as well as the ``tmp_Y_X/blastoutXXXX``.

If diamond is or blastx are specified in ``blast_task_list`` then the ``getorf``
program will be used on the input fasta file to extract only reads with 
open reading frames to narrow down the search field to reduce blastx/diamond search 
time.  It will produce an ``orf_filter`` directory inside of the current ``tmp_Y_X`` 
directory.

tmp_Y_X/Y.orfout.fa
-------------------

Output fasta file from getorf

tmp_Y_X/orf_filter.Y
--------------------

Contains only reads/contigs that contain open reading frames

X.Y.blast
---------

Concattenated results from all ``tmp_Y_X/blastoutXXXX``

X.Y.blast.phylo X.Y.blast.ann X.Y.blast.t2q
-------------------------------------------

This is a file that is generated by compiling information from the blast database,
nodes and names files. 

First the X.Y.blast.ann file is generated which is just each hit in the X.Y.blast 
file annotated with taxid and description gathered from the ``blast_db_list`` db.

Then the X.Y.blast.t2q file is generated which is just a simple mapping of taxid
to read/contig id.

Next the X.Y.blast.ann file is used to generate a weighted phylo file for each taxid.
Because each read/contig being blasted can potentially(and most likely will) blast
to multiple taxid, the weighted count is important. The weighted count works as 
follows:

Your X.Y.blast.ann(contigname taxid) file looks as follows::

    c1 10
    c1 10
    c1 10
    c1 10
    c1 10
    c1 20
    c2 20
    c2 20
    c4 10
    c5 30

If we were to just count appearances of the taxid column, taxid 10 would become
overrepresented, but realistically, because c1 hit taxid 10 5 times, doesn't mean
that it should get a weight of 5, but instead, it should just get a weight of 1.
Thus, our weighted count would produce the following::

    10  1.83 (1 + 5/6)
    20  1.17 (1 + 1/6)
    30  1.00

Once the weigthed count is calculated, then the phylogony is extracted from the
names.dmp and nodes.dmp files. Aka, superkingdom, family, genus, order are all 
matched for the taxid's and all of this information is gathered into the final
``X.Y.blast.phylo`` file.

X.Y.top.blast
-------------

Extracts the first hit for each contig/read inside of ``X.Y.blast`` and places
them in here

X.Y.top.blast.phylo X.Y.top.blast.ann X.Y.top.blast.t2q
-------------------------------------------------------

Same process as ``X.Y.blast.phylo`` except input file is ``X.Y.top.blast``

Essentially only giving a report on the best blast hits as blast orders the hits
by best to worst.

X.Y.noblast.fasta
-----------------

Fasta file of all reads that did not blast to any results

Y.samplename.phylo.txt
----------------------------------

All X.Y.blast.phylo files concatenated with ``blast_task_list`` put at the beginning
of the line.

Y.samplename.top.phylo.txt
--------------------------------------

All X.Y.top.blast.phylo files concatenated with ``blast_task_list`` put at the
beginning of the line.

Y.samplename.top.report.txt
---------------------------------------

read/contig sequence appended with blast report line as well as taxid information
and taxid description

Y.samplename.top.smallreport.txt
--------------------------------------------

Same as ``Y.samplename.top.report.txt`` except read/contig sequence is not included

All Output Files/Directories
----------------------------

* Y.count
    Counts for all stages with names from blast_task_list
* X.Y
    Symlink to X.Y.noblast.fasta
* Y.count.superclass
    Superclass count file from blast.phylo
* Y.top.count.superclass
    Superclass count from top.blast.phylo
* iterative_blast_phylo_N.Y
    Symlink to final noblast.fasta file. Represents the resulting
    reads that had no blast results for the entire stage. Would be used
    by next stage in the pipeline as input.
