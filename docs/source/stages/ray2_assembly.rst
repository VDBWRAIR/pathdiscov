============
ray_assembly
============

#. Break R1 and R2 (if exists) into paired and unpaired fastq files
#. Assemble paired and unpaired files using Ray2
#. Runs the outputted fasta file from Ray2 through Cap3 to try and assemble the contigs better
#. Build bowtie index on outputted cap3 concatenated singlet + contig
#. Map original paired and unpaired reads to contig index 
#. Use mapping to find unmapped reads

Configuration Options
=====================

command ray2_assembly

* kmer
    Example: ``25``
* ninst
    Number of mpiexec instances to use.

    You can specify NUMINST to have it replaced with NODE_NUM from :ref:`config-yaml-base`
    
    Example: ``NUMINST``
* cap
    Boolean to specify to run CAP3 after Ray completes
    
    Choices: ``1`` indicates True, ``0`` indicates False
* cap_options
    Options to pass to CAP3
* map2contigs
    Boolean to specify to map reads back to assembly

    Choices: ``1`` to map reads, ``0`` to skip
* bowtie2_options
    Options for bowtie when map2contigs is ``1``

    Example: ``--local``

Output
======
* 1.R1.unmap.fastq, 1.R2.unmap.fastq
    Unmapped reads found from bowtie mapping
* cap3.out
    cap3 output stats
* bowtie2_index
    Directory that contains bowtie index built from cap3 contigs
* bowtie2_mapping
    Directory that contains all bowtie mapping results
* R1.paired.fastq, R2.paired.fastq
    1-to-1 paired reads
* R1.single.fastq, R2.single.fastq
    Unpaired reads
* ray2_assembly_1.fasta
    Symlink to out.cap.fa
* out.ray.fa
    Ray contigs
* out.cap.fa
    Cap contigs + cap singlets with ids replaced with numbers
* out.ray.fa.cap.concat
    Cap contigs + cap singlets
* out.ray.fa.cap.contigs
    Consensus sequences
* out.ray.fa.cap.singlets
    Reads not used in cap3 assembly
* out.ray.fa.cap.ace
    Ace assembly file
* out.ray.fa.cap.contigs.qual
    Contig quality file
* assembly.count
    Number of contigs+singlets generated by CAP3
* contig.id
    Mapping file of new contig number to original Ray2/CAP3 id
* contig_len.txt
    Length of each contig
* contig_numreads.txt
    How many reads support each contig
* R1.count, R2.count
    Count of resulting R1 and R2 unmapped reads
* results
    Directory containing Ray2 assembly

Undocumented Ouput
------------------

* out.ray.fa.cap.contigs.links
* head.1.R1.unmap.fastq
* head.1.R2.unmap.fastq
* logs
* logs_assembly
* out.ray.fa.cap.info
